# Load necessary libraries
library(shiny)
library(shinydashboard)
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(factoextra)
library(plotly)           # For interactive plots
library(randomForest)     # For Random Forest modeling
library(caret)            # For cross-validation and model evaluation
library(shinycssloaders)  # For adding loading animations
library(cluster)          # Essential for silhouette function
library(reshape2)         # For melting the correlation matrix
library(tibble)           # For rownames_to_column

# Load and preprocess data
data("penguins")
penguins <- penguins %>% 
  rename_all(tolower) %>% 
  mutate(
    species = as.factor(species),
    island = as.factor(island),
    sex = as.factor(sex)
  )

# Define UI
ui <- dashboardPage(
  dashboardHeader(title = "Palmer Penguins Analysis"),
  dashboardSidebar(
    sidebarMenu(
      menuItem("Exploratory Data Analysis", tabName = "eda", icon = icon("chart-bar")),
      menuItem("Predictive Modeling", tabName = "model", icon = icon("project-diagram")),
      menuItem("PCA & Clustering", tabName = "pca_cluster", icon = icon("layer-group")),
      menuItem("Column Modifier", tabName = "column_mod", icon = icon("edit")),
      menuItem("Download Data", tabName = "download_data", icon = icon("download"))
    ),
    # Filters with Help Tooltips (Tooltips can be added using additional packages if desired)
    selectInput("species_filter", "Species", choices = levels(penguins$species), selected = levels(penguins$species), multiple = TRUE),
    selectInput("island_filter", "Island", choices = levels(penguins$island), selected = levels(penguins$island), multiple = TRUE),
    selectInput("sex_filter", "Sex", choices = levels(penguins$sex), selected = levels(penguins$sex), multiple = TRUE)
  ),
  dashboardBody(
    tabItems(
      # EDA Tab
      tabItem(tabName = "eda",
              fluidRow(
                box(title = "Plots", status = "primary", solidHeader = TRUE, width = 12,
                    tabsetPanel(
                      tabPanel("Scatterplot",
                               selectInput("x_axis", "X-axis", choices = NULL, selected = "bill_length_mm"),
                               selectInput("y_axis", "Y-axis", choices = NULL, selected = "bill_depth_mm"),
                               plotlyOutput("scatterPlot") %>% withSpinner(),
                               downloadButton("downloadScatter", "Download Plot")
                      ),
                      tabPanel("Boxplot",
                               selectInput("box_var", "Variable", choices = NULL, selected = "body_mass_g"),
                               plotlyOutput("boxPlot") %>% withSpinner(),
                               downloadButton("downloadBox", "Download Plot")
                      ),
                      tabPanel("Histogram/Density",
                               selectInput("hist_var", "Variable", choices = NULL, selected = "bill_length_mm"),
                               checkboxInput("show_density", "Show Density Curve", value = FALSE),
                               plotlyOutput("histPlot") %>% withSpinner(),
                               downloadButton("downloadHist", "Download Plot")
                      ),
                      tabPanel("Correlation Heatmap",
                               plotlyOutput("corrHeatmap") %>% withSpinner(),
                               downloadButton("downloadCorr", "Download Heatmap")
                      )
                    )
                )
              ),
              fluidRow(
                box(title = "Summary Statistics", status = "primary", solidHeader = TRUE, width = 12,
                    tableOutput("summaryTable") %>% withSpinner(),
                    downloadButton("downloadSummary", "Download Summary")
                )
              ),
              fluidRow(
                box(title = "Debug Info", status = "warning", solidHeader = TRUE, width = 12,
                    verbatimTextOutput("debugFilteredData")
                )
              )
      ),
      
      # Predictive Modeling Tab
      tabItem(tabName = "model",
              fluidRow(
                box(title = "Build Predictive Model", status = "primary", solidHeader = TRUE, width = 12,
                    selectInput("model_type", "Model Type", choices = c("Linear Regression", "Random Forest"), selected = "Linear Regression"),
                    selectInput("response_var", "Response Variable", choices = NULL, selected = "body_mass_g"),
                    selectInput("predictor_vars", "Predictor Variables", choices = NULL, selected = NULL, multiple = TRUE),
                    checkboxInput("use_cv", "Use Cross-Validation", value = TRUE),
                    actionButton("runModel", "Run Model"),
                    verbatimTextOutput("modelOutput") %>% withSpinner(),
                    downloadButton("downloadModel", "Download Model Summary")
                )
              ),
              fluidRow(
                # Conditional Panel for Linear Regression Diagnostics
                conditionalPanel(
                  condition = "input.model_type == 'Linear Regression'",
                  box(title = "Linear Regression Diagnostics", status = "info", solidHeader = TRUE, width = 12,
                      tabsetPanel(
                        tabPanel("Residuals vs Fitted",
                                 plotlyOutput("residualsPlot") %>% withSpinner()
                        ),
                        tabPanel("Normal Q-Q",
                                 plotlyOutput("qqPlot") %>% withSpinner()
                        ),
                        tabPanel("Actual vs Predicted",
                                 plotlyOutput("actualPredictedPlot") %>% withSpinner()
                        )
                      )
                  )
                )
              )
      ),
      
      # PCA & Clustering Tab
      tabItem(tabName = "pca_cluster",
              fluidRow(
                box(title = "Principal Component Analysis", status = "primary", solidHeader = TRUE, width = 6,
                    checkboxInput("normalize_pca", "Normalize Data", value = TRUE),
                    plotlyOutput("pcaPlot") %>% withSpinner(),
                    downloadButton("downloadPCA", "Download PCA Plot")
                ),
                box(title = "PCA Scree Plot", status = "primary", solidHeader = TRUE, width = 6,
                    plotlyOutput("screePlot") %>% withSpinner(),
                    downloadButton("downloadScree", "Download Scree Plot")
                )
              ),
              fluidRow(
                box(title = "Clustering", status = "primary", solidHeader = TRUE, width = 6,
                    selectInput("clust_algo", "Clustering Algorithm", choices = c("K-Means", "Hierarchical"), selected = "K-Means"),
                    conditionalPanel(
                      condition = "input.clust_algo == 'K-Means'",
                      numericInput("num_clusters", "Number of Clusters", value = 3, min = 2, max = 10)
                    ),
                    plotlyOutput("clusterPlot") %>% withSpinner(),
                    downloadButton("downloadCluster", "Download Cluster Plot")
                ),
                box(title = "Clustering Metrics", status = "primary", solidHeader = TRUE, width = 6,
                    tableOutput("clusterMetrics") %>% withSpinner()
                )
              )
      ),
      
      # Column Modifier Tab
      tabItem(tabName = "column_mod",
              fluidRow(
                box(title = "Modify or Create Column", status = "primary", solidHeader = TRUE, width = 12,
                    textInput("new_column_name", "New Column Name"),
                    textAreaInput("column_formula", "R Formula", placeholder = "e.g., ifelse(sex == 'male' & body_mass_g > 4000, 'Large Male', 'Other')"),
                    actionButton("modifyColumn", "Apply"),
                    tableOutput("modifiedData") %>% withSpinner()
                )
              )
      ),
      
      # Download Data Tab
      tabItem(tabName = "download_data",
              fluidRow(
                box(title = "Download Filtered Data", status = "primary", solidHeader = TRUE, width = 12,
                    downloadButton("downloadData", "Download CSV")
                )
              ),
              fluidRow(
                box(title = "Download Modified Data", status = "primary", solidHeader = TRUE, width = 12,
                    tableOutput("downloadModifiedData") %>% withSpinner(),
                    downloadButton("downloadModifiedDataCSV", "Download Modified Data")
                )
              )
      )
    )
  )
)

# Define Server
server <- function(input, output, session) {
  
  # Initialize reactiveVal with the original data (filtered for non-NA islands)
  modifiedData <- reactiveVal({
    penguins %>% 
      filter(!is.na(island))
  })
  
  # Observe filter inputs and update modifiedData accordingly
  observe({
    df <- penguins %>% 
      filter(
        species %in% input$species_filter,
        island %in% input$island_filter,
        sex %in% input$sex_filter
      ) %>%
      filter(!is.na(island))
    modifiedData(df)
  })
  
  # --------------------- Dynamic Select Inputs ---------------------
  # Update selectInput choices whenever modifiedData changes
  observe({
    df <- modifiedData()
    numeric_cols <- names(df)[sapply(df, is.numeric)]
    factor_cols <- names(df)[sapply(df, is.factor)]
    
    # Update EDA Tab Select Inputs
    updateSelectInput(session, "x_axis", choices = numeric_cols, selected = ifelse("bill_length_mm" %in% numeric_cols, "bill_length_mm", numeric_cols[1]))
    updateSelectInput(session, "y_axis", choices = numeric_cols, selected = ifelse("bill_depth_mm" %in% numeric_cols, "bill_depth_mm", numeric_cols[2]))
    updateSelectInput(session, "box_var", choices = numeric_cols, selected = ifelse("body_mass_g" %in% numeric_cols, "body_mass_g", numeric_cols[1]))
    updateSelectInput(session, "hist_var", choices = numeric_cols, selected = ifelse("bill_length_mm" %in% numeric_cols, "bill_length_mm", numeric_cols[1]))
    
    # Update Predictive Modeling Tab Select Inputs
    updateSelectInput(session, "response_var", choices = numeric_cols, selected = ifelse("body_mass_g" %in% numeric_cols, "body_mass_g", numeric_cols[1]))
    updateSelectInput(session, "predictor_vars", choices = numeric_cols, selected = setdiff(numeric_cols, "body_mass_g"))
  })
  # --------------------- End Dynamic Select Inputs ---------------------
  
  # Debug Output to Check Columns
  output$debugFilteredData <- renderPrint({
    str(modifiedData())
  })
  
  # --------------------- EDA Plots ---------------------
  
  # Scatterplot
  output$scatterPlot <- renderPlotly({
    df <- modifiedData()
    req(nrow(df) > 0)
    req(input$x_axis, input$y_axis)  # Ensure inputs are available
    p <- ggplot(df, aes_string(x = input$x_axis, y = input$y_axis, color = "species")) +
      geom_point() +
      theme_gray() 
    ggplotly(p)
  })
  
  # Download Scatterplot
  output$downloadScatter <- downloadHandler(
    filename = function() { paste("scatterplot-", Sys.Date(), ".png", sep = "") },
    content = function(file) {
      df <- modifiedData()
      if(nrow(df) == 0){
        showNotification("No data available for plotting.", type = "error")
        return(NULL)
      }
      req(input$x_axis, input$y_axis)
      p <- ggplot(df, aes_string(x = input$x_axis, y = input$y_axis, color = "species")) +
        geom_point() +
        theme_gray() 
      ggsave(file, plot = p)
    }
  )
  
  # Boxplot
  output$boxPlot <- renderPlotly({
    df <- modifiedData()
    req(nrow(df) > 0)
    req(input$box_var)
    p <- ggplot(df, aes(x = species, y = .data[[input$box_var]], fill = species)) +
      geom_boxplot() +
      theme_gray() 
    ggplotly(p)
  })
  
  # Download Boxplot
  output$downloadBox <- downloadHandler(
    filename = function() { paste("boxplot-", Sys.Date(), ".png", sep = "") },
    content = function(file) {
      df <- modifiedData()
      if(nrow(df) == 0){
        showNotification("No data available for plotting.", type = "error")
        return(NULL)
      }
      req(input$box_var)
      p <- ggplot(df, aes(x = species, y = .data[[input$box_var]], fill = species)) +
        geom_boxplot() +
        theme_gray() 
      ggsave(file, plot = p)
    }
  )
  
  # Histogram/Density Plot
  output$histPlot <- renderPlotly({
    df <- modifiedData()
    req(nrow(df) > 0)
    req(input$hist_var)
    p <- ggplot(df, aes_string(x = input$hist_var, fill = "species")) +
      geom_histogram(alpha = 0.6, position = "identity", bins = 30) +
      theme_minimal()
    if(input$show_density){
      p <- p + geom_density(aes(y = ..count..), alpha = 0.3)
    }
    ggplotly(p)
  })
  
  # Download Histogram
  output$downloadHist <- downloadHandler(
    filename = function() { paste("histogram-", Sys.Date(), ".png", sep = "") },
    content = function(file) {
      df <- modifiedData()
      if(nrow(df) == 0){
        showNotification("No data available for plotting.", type = "error")
        return(NULL)
      }
      req(input$hist_var)
      p <- ggplot(df, aes_string(x = input$hist_var, fill = "species")) +
        geom_histogram(alpha = 0.6, position = "identity", bins = 30) +
        theme_gray() 
      if(input$show_density){
        p <- p + geom_density(aes(y = ..count..), alpha = 0.3)
      }
      ggsave(file, plot = p)
    }
  )
  
  # Correlation Heatmap using ggplot2 instead of fviz_correlation
  output$corrHeatmap <- renderPlotly({
    df <- modifiedData() %>% 
      select_if(is.numeric) %>% 
      na.omit()
    req(nrow(df) > 1)
    
    # Calculate correlation matrix
    corr <- cor(df)
    
    # Melt the correlation matrix for ggplot2
    corr_melt <- melt(corr)
    
    # Create ggplot2 heatmap
    p <- ggplot(corr_melt, aes(x = Var1, y = Var2, fill = value)) +
      geom_tile(color = "white") +
      scale_fill_gradient2(low = "blue", high = "red", mid = "white",
                           midpoint = 0, limit = c(-1,1), space = "Lab",
                           name="Correlation") +
      theme_minimal() + 
      theme(axis.text.x = element_text(angle = 45, vjust = 1, 
                                       size = 12, hjust = 1)) +
      coord_fixed()
    
    ggplotly(p)
  })
  
  # Download Correlation Heatmap
  output$downloadCorr <- downloadHandler(
    filename = function() { paste("correlation-heatmap-", Sys.Date(), ".png", sep = "") },
    content = function(file) {
      df <- modifiedData() %>% 
        select_if(is.numeric) %>% 
        na.omit()
      if(nrow(df) <=1 ){
        showNotification("Not enough data for correlation heatmap.", type = "error")
        return(NULL)
      }
      
      # Calculate correlation matrix
      corr <- cor(df)
      
      # Melt the correlation matrix for ggplot2
      corr_melt <- melt(corr)
      
      # Create ggplot2 heatmap
      p <- ggplot(corr_melt, aes(x = Var1, y = Var2, fill = value)) +
        geom_tile(color = "white") +
        scale_fill_gradient2(low = "blue", high = "red", mid = "white",
                             midpoint = 0, limit = c(-1,1), space = "Lab",
                             name="Correlation") +
        theme_gray() 
        theme(axis.text.x = element_text(angle = 45, vjust = 1, 
                                         size = 12, hjust = 1)) +
        coord_fixed()
      
      ggsave(file, plot = p)
    }
  )
  
  # --------------------- Summary Statistics ---------------------
  
  # Conditional Summary Statistics based on Variable Type
  output$summaryTable <- renderTable({
    df <- modifiedData()
    req(nrow(df) > 0)
    
    # Initialize an empty list to store summaries
    summary_list <- lapply(names(df), function(var){
      if(is.numeric(df[[var]])){
        # Numerical Summary
        mean_val <- mean(df[[var]], na.rm = TRUE)
        sd_val <- sd(df[[var]], na.rm = TRUE)
        median_val <- median(df[[var]], na.rm = TRUE)
        min_val <- min(df[[var]], na.rm = TRUE)
        max_val <- max(df[[var]], na.rm = TRUE)
        data.frame(
          Variable = var,
          Type = "Numeric",
          Mean = round(mean_val, 2),
          SD = round(sd_val, 2),
          Median = round(median_val, 2),
          Min = round(min_val, 2),
          Max = round(max_val, 2),
          Counts = NA,
          stringsAsFactors = FALSE
        )
      } else if(is.factor(df[[var]])){
        # Categorical Summary
        counts <- table(df[[var]])
        counts_str <- paste(names(counts), counts, sep=": ", collapse=", ")
        data.frame(
          Variable = var,
          Type = "Categorical",
          Mean = NA,
          SD = NA,
          Median = NA,
          Min = NA,
          Max = NA,
          Counts = counts_str,
          stringsAsFactors = FALSE
        )
      }
    })
    
    # Combine all summaries into a single data frame
    summary_df <- bind_rows(summary_list)
    
    # Arrange the summary_df for better readability
    summary_df <- summary_df %>%
      select(Variable, Type, Mean, SD, Median, Min, Max, Counts)
    
    return(summary_df)
  }, striped = TRUE, hover = TRUE, spacing = "m", bordered = TRUE)
  
  # Download Conditional Summary
  output$downloadSummary <- downloadHandler(
    filename = function() { paste("summary-", Sys.Date(), ".csv", sep = "") },
    content = function(file) {
      df <- modifiedData()
      if(nrow(df) == 0){
        write.csv(data.frame(Error = "No data available for summary."), file, row.names = FALSE)
      } else {
        # Initialize an empty list to store summaries
        summary_list <- lapply(names(df), function(var){
          if(is.numeric(df[[var]])){
            # Numerical Summary
            mean_val <- mean(df[[var]], na.rm = TRUE)
            sd_val <- sd(df[[var]], na.rm = TRUE)
            median_val <- median(df[[var]], na.rm = TRUE)
            min_val <- min(df[[var]], na.rm = TRUE)
            max_val <- max(df[[var]], na.rm = TRUE)
            data.frame(
              Variable = var,
              Type = "Numeric",
              Mean = round(mean_val, 2),
              SD = round(sd_val, 2),
              Median = round(median_val, 2),
              Min = round(min_val, 2),
              Max = round(max_val, 2),
              Counts = NA,
              stringsAsFactors = FALSE
            )
          } else if(is.factor(df[[var]])){
            # Categorical Summary
            counts <- table(df[[var]])
            counts_str <- paste(names(counts), counts, sep=": ", collapse=", ")
            data.frame(
              Variable = var,
              Type = "Categorical",
              Mean = NA,
              SD = NA,
              Median = NA,
              Min = NA,
              Max = NA,
              Counts = counts_str,
              stringsAsFactors = FALSE
            )
          }
        })
        
        # Combine all summaries into a single data frame
        summary_df <- bind_rows(summary_list)
        
        # Arrange the summary_df for better readability
        summary_df <- summary_df %>%
          select(Variable, Type, Mean, SD, Median, Min, Max, Counts)
        
        write.csv(summary_df, file, row.names = FALSE)
      }
    }
  )
  
  # --------------------- Predictive Modeling ---------------------
  
  # Reactive expression for model training
  trainedModel <- eventReactive(input$runModel, {
    df <- modifiedData()
    req(nrow(df) > 0)
    req(input$response_var, input$predictor_vars)
    
    # Prevent selecting the response variable as a predictor
    if(input$response_var %in% input$predictor_vars){
      showNotification("Response variable cannot be a predictor. Please adjust your selections.", type = "error")
      return(NULL)
    }
    
    # Define formula
    formula <- as.formula(paste(input$response_var, "~", paste(input$predictor_vars, collapse = "+")))
    
    # Set up cross-validation if selected
    if(input$use_cv){
      train_control <- trainControl(method = "cv", number = 5)
    } else {
      train_control <- trainControl(method = "none")
    }
    
    # Train the model based on selected type
    if(input$model_type == "Linear Regression"){
      model <- train(formula, data = df, method = "lm", trControl = train_control)
    } else if(input$model_type == "Random Forest"){
      model <- train(formula, data = df, method = "rf", trControl = train_control, importance = TRUE)
    }
    
    return(model)
  })
  
  # Display Model Output
  output$modelOutput <- renderPrint({
    model <- trainedModel()
    req(model)
    print(model)
  })
  
  # Download Model Summary
  output$downloadModel <- downloadHandler(
    filename = function() { paste("model-summary-", Sys.Date(), ".txt", sep = "") },
    content = function(file) {
      model <- trainedModel()
      if (is.null(model)) {
        writeLines("No model has been generated yet.", con = file)
      } else {
        sink(file)
        print(model)
        sink()
      }
    }
  )
  
  # Generate Diagnostic Plots for Linear Regression
  observeEvent(input$runModel, {
    req(input$model_type)
    if(input$model_type == "Linear Regression"){
      model <- trainedModel()
      req(model)
      
      # Residuals vs Fitted
      output$residualsPlot <- renderPlotly({
        residuals <- resid(model$finalModel)
        fitted <- fitted(model$finalModel)
        p <- ggplot(data = NULL, aes(x = fitted, y = residuals)) +
          geom_point(alpha = 0.6) +
          geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
          labs(title = "Residuals vs Fitted", x = "Fitted Values", y = "Residuals") +
          theme_minimal()
        ggplotly(p)
      })
      
      # Normal Q-Q Plot
      output$qqPlot <- renderPlotly({
        residuals <- resid(model$finalModel)
        qq <- qqnorm(residuals, plot.it = FALSE)
        qq_df <- data.frame(theoretical = qq$x, sample = qq$y)
        p <- ggplot(qq_df, aes(x = theoretical, y = sample)) +
          geom_point(alpha = 0.6) +
          geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +
          labs(title = "Normal Q-Q", x = "Theoretical Quantiles", y = "Sample Quantiles") +
          theme_minimal()
        ggplotly(p)
      })
      
      # Actual vs Predicted Plot
      output$actualPredictedPlot <- renderPlotly({
        df <- modifiedData()
        actual <- df[[input$response_var]]
        predicted <- predict(model, df)
        p <- ggplot(data = NULL, aes(x = actual, y = predicted)) +
          geom_point(alpha = 0.6) +
          geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +
          labs(title = "Actual vs Predicted", x = "Actual Values", y = "Predicted Values") +
          theme_minimal()
        ggplotly(p)
      })
    } else {
      # Remove diagnostic plots if not Linear Regression
      output$residualsPlot <- renderPlotly(NULL)
      output$qqPlot <- renderPlotly(NULL)
      output$actualPredictedPlot <- renderPlotly(NULL)
    }
  })
  
  # --------------------- PCA & Clustering ---------------------
  
  # PCA Plot
  pca_data <- reactive({
    df <- modifiedData() %>% 
      select_if(is.numeric) %>% 
      na.omit()
    req(nrow(df) > 0)
    if(input$normalize_pca){
      df <- scale(df)
    }
    pca_res <- prcomp(df, center = TRUE, scale. = FALSE)
    return(list(pca = pca_res, data = df))
  })
  
  output$pcaPlot <- renderPlotly({
    pca_res <- pca_data()$pca
    df <- pca_data()$data
    species <- modifiedData()$species[complete.cases(df)]
    
    p <- fviz_pca_biplot(pca_res, geom = "point", habillage = species, addEllipses = TRUE) +
      theme_minimal()
    ggplotly(p)
  })
  
  # Download PCA Plot
  output$downloadPCA <- downloadHandler(
    filename = function() { paste("pca-plot-", Sys.Date(), ".png", sep = "") },
    content = function(file) {
      pca_res <- pca_data()$pca
      df <- pca_data()$data
      species <- modifiedData()$species[complete.cases(df)]
      
      p <- fviz_pca_biplot(pca_res, geom = "point", habillage = species, addEllipses = TRUE) +
        theme_gray() 
      ggsave(file, plot = p)
    }
  )
  
  # Scree Plot
  output$screePlot <- renderPlotly({
    pca_res <- pca_data()$pca
    p <- fviz_eig(pca_res, addlabels = TRUE, ylim = c(0, 100)) +
      theme_gray() 
    ggplotly(p)
  })
  
  # Download Scree Plot
  output$downloadScree <- downloadHandler(
    filename = function() { paste("scree-plot-", Sys.Date(), ".png", sep = "") },
    content = function(file) {
      pca_res <- pca_data()$pca
      p <- fviz_eig(pca_res, addlabels = TRUE, ylim = c(0, 100)) +
        theme_gray() 
      ggsave(file, plot = p)
    }
  )
  
  # Clustering Plot
  clustering_data <- reactive({
    df <- modifiedData() %>% 
      select_if(is.numeric) %>% 
      na.omit()
    req(nrow(df) > 1)
    if(input$normalize_pca){
      df_scaled <- scale(df)
    } else {
      df_scaled <- df
    }
    return(df_scaled)
  })
  
  output$clusterPlot <- renderPlotly({
    df_scaled <- clustering_data()
    algo <- input$clust_algo
    
    if(algo == "K-Means"){
      set.seed(123)
      kmeans_res <- kmeans(df_scaled, centers = input$num_clusters)
      p <- fviz_cluster(kmeans_res, data = df_scaled, geom = "point", ellipse.type = "norm", 
                        habillage = modifiedData()$species[complete.cases(clustering_data())]) +
        theme_minimal()
    } else if(algo == "Hierarchical"){
      dist_mat <- dist(df_scaled)
      hc <- hclust(dist_mat, method = "ward.D2")
      clusters <- cutree(hc, k = input$num_clusters)
      p <- fviz_cluster(list(data = df_scaled, cluster = clusters), geom = "point",
                        ellipse.type = "norm", 
                        habillage = modifiedData()$species[complete.cases(clustering_data())]) +
        theme_minimal()
    }
    
    ggplotly(p)
  })
  
  # Download Clustering Plot
  output$downloadCluster <- downloadHandler(
    filename = function() { paste("cluster-plot-", Sys.Date(), ".png", sep = "") },
    content = function(file) {
      df_scaled <- clustering_data()
      algo <- input$clust_algo
      
      if(algo == "K-Means"){
        set.seed(123)
        kmeans_res <- kmeans(df_scaled, centers = input$num_clusters)
        p <- fviz_cluster(kmeans_res, data = df_scaled, geom = "point", ellipse.type = "norm", 
                          habillage = modifiedData()$species[complete.cases(clustering_data())]) +
          theme_minimal()
      } else if(algo == "Hierarchical"){
        dist_mat <- dist(df_scaled)
        hc <- hclust(dist_mat, method = "ward.D2")
        clusters <- cutree(hc, k = input$num_clusters)
        p <- fviz_cluster(list(data = df_scaled, cluster = clusters), geom = "point",
                          ellipse.type = "norm", 
                          habillage = modifiedData()$species[complete.cases(clustering_data())]) +
          theme_gray() 
      }
      
      ggsave(file, plot = p)
    }
  )
  
  # Clustering Metrics
  output$clusterMetrics <- renderTable({
    df_scaled <- clustering_data()
    algo <- input$clust_algo
    req(nrow(df_scaled) > 1)
    
    if(algo == "K-Means"){
      set.seed(123)
      kmeans_res <- kmeans(df_scaled, centers = input$num_clusters)
      silhouette_avg <- silhouette(kmeans_res$cluster, dist(df_scaled))
      avg_sil <- mean(silhouette_avg[, 3])
      df_metrics <- data.frame(
        Metric = c("Total Within Sum of Squares", "Average Silhouette Width"),
        Value = c(kmeans_res$tot.withinss, round(avg_sil, 3)),
        stringsAsFactors = FALSE
      )
    } else if(algo == "Hierarchical"){
      dist_mat <- dist(df_scaled)
      hc <- hclust(dist_mat, method = "ward.D2")
      clusters <- cutree(hc, k = input$num_clusters)
      silhouette_avg <- silhouette(clusters, dist_mat)
      avg_sil <- mean(silhouette_avg[, 3])
      df_metrics <- data.frame(
        Metric = c("Height of Dendrogram", "Average Silhouette Width"),
        Value = c(max(hc$height), round(avg_sil, 3)),
        stringsAsFactors = FALSE
      )
    }
    return(df_metrics)
  })
  
  # --------------------- Column Modifier ---------------------
  
  observeEvent(input$modifyColumn, {
    req(input$new_column_name, input$column_formula)
    df <- modifiedData()
    
    # Safely evaluate the formula within the context of df
    new_col <- try(eval(parse(text = input$column_formula), envir = df), silent = TRUE)
    
    if (inherits(new_col, "try-error")) {
      showNotification("Error in evaluating the formula. Please check the syntax.", type = "error")
    } else {
      # Ensure the new column name doesn't conflict with existing names
      if(input$new_column_name %in% names(df)){
        showNotification("Column name already exists. Please choose a different name.", type = "error")
      } else {
        df <- df %>% mutate(!!input$new_column_name := new_col)
        modifiedData(df)
        
        # Update the data tables
        output$modifiedData <- renderTable({
          df_display <- df %>% head(10)  # Display only the first 10 rows for brevity
          df_display
        }, striped = TRUE, hover = TRUE, spacing = "m", bordered = TRUE)
        
        output$downloadModifiedData <- renderTable({
          df_display <- df %>% head(10)  # Display only the first 10 rows for brevity
          df_display
        }, striped = TRUE, hover = TRUE, spacing = "m", bordered = TRUE)
        
        # Enable download of modified data
        output$downloadModifiedDataCSV <- downloadHandler(
          filename = function() { paste("modified-data-", Sys.Date(), ".csv", sep = "") },
          content = function(file) {
            write.csv(df, file, row.names = FALSE)
          }
        )
        
        showNotification("Column added/modified successfully.", type = "message")
      }
    }
  })
  
  # --------------------- Download Data ---------------------
  
  # Download Filtered Data
  output$downloadData <- downloadHandler(
    filename = function() { paste("filtered-data-", Sys.Date(), ".csv", sep = "") },
    content = function(file) {
      df <- modifiedData()
      write.csv(df, file, row.names = FALSE)
    }
  )
  
  # --------------------- Interactive Data Table ---------------------
  
  output$downloadModifiedData <- renderTable({
    df <- modifiedData()
    df_display <- df %>% head(10)  # Display only the first 10 rows for brevity
    df_display
  }, striped = TRUE, hover = TRUE, spacing = "m", bordered = TRUE)
  
}

# Run the application 
shinyApp(ui = ui, server = server)
